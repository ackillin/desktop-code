     1                                  bits 64
     2                                  
     3                                  
     4                                  section .data
     5 00000000 4576656E204E756D62-         even_msg db 'Even Number!', 0xA, 0xD
     5 00000009 6572210A0D         
     6                                      len1 equ $-even_msg
     7                                  
     8 0000000E 4F64645F4E756D6265-         odd_msg db 'Odd_Number!'
     8 00000017 7221               
     9                                      len2 equ $-odd_msg
    10                                  
    11                                  
    12                                  section .text
    13                                      global _start
    14                                  
    15                                  _start:
    16 00000000 66B80800                    mov ax, 8h
    17 00000004 6683E001                    and ax, 1
    18 00000008 7418                        jz evnn     ;Jump to even if previous was true
    19                                  
    20                                      ; Start odd Section
    21 0000000A B804000000                  mov eax, 4
    22 0000000F BB01000000                  mov ebx, 1
    23 00000014 B9[0E000000]                mov ecx, odd_msg
    24 00000019 BA0B000000                  mov edx, len2
    25 0000001E CD80                        int 0x80
    26 00000020 EB18                        jmp outprog
    27                                  
    28                                  evnn:
    29 00000022 B409                        mov ah, 09h
    30 00000024 B804000000                  mov eax, 4
    31 00000029 BB01000000                  mov ebx, 1
    32 0000002E B9[00000000]                mov ecx, even_msg
    33 00000033 BA0E000000                  mov edx, len1
    34 00000038 CD80                        int 0x80
    35                                  
    36                                  outprog:
    37 0000003A B801000000                  mov eax,1
    38 0000003F CD80                        int 0x80
